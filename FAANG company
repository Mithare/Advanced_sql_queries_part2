/** Q) We want to generate an inventory age report which would show the distribution of remaining inventory across the length of time the inventory has been sitting at the warehouse. We are trying to classify the inventory on hand across the below 4 buckets to denote the time the inventory has been lying the warehouse.

0-90 days old 
91-180 days old
181-270 days old
271 – 365 days old

For example, the warehouse received 100 units yesterday and shipped 30 units today, then there are 70 units which are a day old.

The warehouses use FIFO (first in first out) approach to manage inventory, i.e., the inventory that comes first will be sent out first. 

For example, on 20th May 2019, 250 units were inbounded into the FC. On 22nd May 2019, 8 units were shipped out (outbound) from the FC, reducing inventory on hand to 242 units. On 31st December, 120 units were further inbounded into the FC increasing the inventory on hand from 242 to 362.On 29th January 2020, 27 units were shipped out reducing the inventory on hand to 335 units.
On 29th January, of the 335 units on hands, 120 units were 0-90 days old (29 days old) and 215 units were 181-270 days old (254 days old).

Columns:
ID of the log entry
OnHandQuantity: Quantity in warehouse after an event
OnHandQuantityDelta: Change in on-hand quantity due to an event
event_type: Inbound – inventory being brought into the warehouse; Outbound – inventory being sent out of warehouse
event_datetime: date- time of event
The data is sorted with latest entry at top. **/



drop table warehouse;
create table warehouse
(
	ID						varchar(10),
	OnHandQuantity			int,
	OnHandQuantityDelta		int,
	event_type				varchar(10),
	event_datetime			timestamp
);

insert into warehouse values
('SH0013', 278,   99 ,   'OutBound', '2020-05-25 0:25'), 
('SH0012', 377,   31 ,   'InBound',  '2020-05-24 22:00'),
('SH0011', 346,   1  ,   'OutBound', '2020-05-24 15:01'),
('SH0010', 346,   1  ,   'OutBound', '2020-05-23 5:00'),
('SH009',  348,   102,   'InBound',  '2020-04-25 18:00'),
('SH008',  246,   43 ,   'InBound',  '2020-04-25 2:00'),
('SH007',  203,   2  ,   'OutBound', '2020-02-25 9:00'),
('SH006',  205,   129,   'OutBound', '2020-02-18 7:00'),
('SH005',  334,   1  ,   'OutBound', '2020-02-18 8:00'),
('SH004',  335,   27 ,   'OutBound', '2020-01-29 5:00'),
('SH003',  362,   120,   'InBound',  '2019-12-31 2:00'),
('SH002',  242,   8  ,   'OutBound', '2019-05-22 0:50'),
('SH001',  250,   250,   'InBound',  '2019-05-20 0:45');
COMMIT;

with wh as (
select * from warehouse order by event_datetime desc
)

, days as (
select onhandquantity, event_datetime,
(event_datetime - interval '90 days') as days_90,
(event_datetime - interval '180 days') as days_180,
(event_datetime - interval '270 days') as days_270,
(event_datetime - interval '365 days') as days_365
from wh
limit 1
)

,int_90_days as (
select coalesce(sum(onhandquantitydelta), 0) as tot_90
from wh
cross join days as d
where wh.event_type = 'InBound' and
	wh.event_datetime >= days_90
)

,int_90_days_final as (
select case when tot_90 > d.onhandquantity then onhandquantity
		else tot_90
		end as int_90
from int_90_days
cross join days as d
)

,int_180_days as (
select coalesce(sum(onhandquantitydelta), 0) as tot_180
from wh
cross join days as d
where wh.event_type = 'InBound' and
	wh.event_datetime between days_180 and days_90
)

,int_180_days_final as (
select case when tot_180 > (d.onhandquantity - int_90) then (d.onhandquantity - int_90)
		else tot_180
		end as int_180
from int_180_days
cross join days as d
cross join int_90_days_final
)

,int_270_days as (
select coalesce(sum(onhandquantitydelta), 0) as tot_270
from wh
cross join days as d
where wh.event_type = 'InBound' and
	wh.event_datetime between days_270 and days_180
)

,int_270_days_final as (
select case when tot_270 > (d.onhandquantity - (int_90 + int_180)) then (d.onhandquantity - (int_90 + int_180))
		else tot_270
		end as int_270
from int_270_days
cross join days as d
cross join int_90_days_final
cross join int_180_days_final
)

,int_365_days as (
select coalesce(sum(onhandquantitydelta), 0) as tot_365
from wh
cross join days as d
where wh.event_type = 'InBound' and
	wh.event_datetime between days_365 and days_270
)

,int_365_days_final as (
select case when tot_365 > (d.onhandquantity - (int_90 + int_180 + int_270)) then (d.onhandquantity - (int_90 + int_180 + int_270))
		else tot_365
		end as int_365
from int_365_days
cross join days as d
cross join int_90_days_final
cross join int_180_days_final
cross join int_270_days_final
)

select int_90 as "0-90 days old",
int_180 as "91-180 days old",
int_270 as "181-270 days old",
int_365 as "271-365 days old"
from int_90_days_final
cross join int_180_days_final
cross join int_270_days_final
cross join int_365_days_final
